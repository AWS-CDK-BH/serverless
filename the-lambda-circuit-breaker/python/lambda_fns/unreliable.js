'use strict';
const CircuitBreaker = require('circuitbreaker-lambda');
let message;
const options = {
    fallback: fallbackFunction,
    failureThreshold: 3,
    successThreshold: 2,
    timeout: 10000
};
function unreliableFunction() {
    return new Promise((resolve, reject) => {
        if (Math.random() < 0.6) {
            resolve({ data: 'Success' });
            message = 'Success';
        }
        else {
            reject({ data: 'Failed' });
            message = 'Failed';
        }
    });
}
function fallbackFunction() {
    return new Promise((resolve, reject) => {
        resolve({ data: 'Expensive Fallback Successful' });
        message = 'Fallback';
    });
}
exports.handler = async (event) => {
    const circuitBreaker = new CircuitBreaker(unreliableFunction, options);
    await circuitBreaker.fire();
    const response = {
        statusCode: 200,
        body: JSON.stringify({
            message: message
        })
    };
    return response;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5yZWxpYWJsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInVucmVsaWFibGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsWUFBWSxDQUFBO0FBQ1osTUFBTSxjQUFjLEdBQUcsT0FBTyxDQUFDLHVCQUF1QixDQUFDLENBQUE7QUFDdkQsSUFBSSxPQUFjLENBQUE7QUFFbEIsTUFBTSxPQUFPLEdBQUc7SUFDZCxRQUFRLEVBQUUsZ0JBQWdCO0lBQzFCLGdCQUFnQixFQUFFLENBQUM7SUFDbkIsZ0JBQWdCLEVBQUUsQ0FBQztJQUNuQixPQUFPLEVBQUUsS0FBSztDQUNmLENBQUE7QUFFRCxTQUFTLGtCQUFrQjtJQUN6QixPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1FBQ3JDLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEdBQUcsRUFBRTtZQUN2QixPQUFPLENBQUMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQTtZQUM1QixPQUFPLEdBQUcsU0FBUyxDQUFBO1NBQ3BCO2FBQU07WUFDTCxNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQTtZQUMxQixPQUFPLEdBQUcsUUFBUSxDQUFBO1NBQ25CO0lBQ0gsQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDO0FBQ0QsU0FBUyxnQkFBZ0I7SUFDdkIsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtRQUNyQyxPQUFPLENBQUMsRUFBRSxJQUFJLEVBQUUsK0JBQStCLEVBQUUsQ0FBQyxDQUFBO1FBQ2xELE9BQU8sR0FBRyxVQUFVLENBQUE7SUFDdEIsQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDO0FBRUQsT0FBTyxDQUFDLE9BQU8sR0FBRyxLQUFLLEVBQUUsS0FBUyxFQUFFLEVBQUU7SUFDcEMsTUFBTSxjQUFjLEdBQUcsSUFBSSxjQUFjLENBQUMsa0JBQWtCLEVBQUUsT0FBTyxDQUFDLENBQUE7SUFDdEUsTUFBTSxjQUFjLENBQUMsSUFBSSxFQUFFLENBQUE7SUFDM0IsTUFBTSxRQUFRLEdBQUc7UUFDZixVQUFVLEVBQUUsR0FBRztRQUNmLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDO1lBQ25CLE9BQU8sRUFBRSxPQUFPO1NBQ2pCLENBQUM7S0FDSCxDQUFBO0lBQ0QsT0FBTyxRQUFRLENBQUE7QUFDakIsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiXG4ndXNlIHN0cmljdCdcbmNvbnN0IENpcmN1aXRCcmVha2VyID0gcmVxdWlyZSgnY2lyY3VpdGJyZWFrZXItbGFtYmRhJylcbmxldCBtZXNzYWdlOnN0cmluZ1xuXG5jb25zdCBvcHRpb25zID0ge1xuICBmYWxsYmFjazogZmFsbGJhY2tGdW5jdGlvbixcbiAgZmFpbHVyZVRocmVzaG9sZDogMyxcbiAgc3VjY2Vzc1RocmVzaG9sZDogMixcbiAgdGltZW91dDogMTAwMDBcbn1cblxuZnVuY3Rpb24gdW5yZWxpYWJsZUZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBpZiAoTWF0aC5yYW5kb20oKSA8IDAuNikge1xuICAgICAgcmVzb2x2ZSh7IGRhdGE6ICdTdWNjZXNzJyB9KVxuICAgICAgbWVzc2FnZSA9ICdTdWNjZXNzJ1xuICAgIH0gZWxzZSB7XG4gICAgICByZWplY3QoeyBkYXRhOiAnRmFpbGVkJyB9KVxuICAgICAgbWVzc2FnZSA9ICdGYWlsZWQnXG4gICAgfVxuICB9KVxufVxuZnVuY3Rpb24gZmFsbGJhY2tGdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgcmVzb2x2ZSh7IGRhdGE6ICdFeHBlbnNpdmUgRmFsbGJhY2sgU3VjY2Vzc2Z1bCcgfSlcbiAgICBtZXNzYWdlID0gJ0ZhbGxiYWNrJ1xuICB9KVxufVxuXG5leHBvcnRzLmhhbmRsZXIgPSBhc3luYyAoZXZlbnQ6YW55KSA9PiB7XG4gIGNvbnN0IGNpcmN1aXRCcmVha2VyID0gbmV3IENpcmN1aXRCcmVha2VyKHVucmVsaWFibGVGdW5jdGlvbiwgb3B0aW9ucylcbiAgYXdhaXQgY2lyY3VpdEJyZWFrZXIuZmlyZSgpXG4gIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgIHN0YXR1c0NvZGU6IDIwMCxcbiAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICBtZXNzYWdlOiBtZXNzYWdlXG4gICAgfSlcbiAgfVxuICByZXR1cm4gcmVzcG9uc2Vcbn1cbiJdfQ==