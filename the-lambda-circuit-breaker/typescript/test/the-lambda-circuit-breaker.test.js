"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = require("@aws-cdk/assert");
const cdk = require("@aws-cdk/core");
const TheLambdaCircuitBreaker = require("../lib/the-lambda-circuit-breaker-stack");
test('Empty Stack', () => {
    const app = new cdk.App();
    // WHEN
    const stack = new TheLambdaCircuitBreaker.TheLambdaCircuitBreakerStack(app, 'MyTestStack');
    // THEN
    assert_1.expect(stack).to(assert_1.matchTemplate({
        "Resources": {}
    }, assert_1.MatchStyle.EXACT));
});
test('DynamoDB Created', () => {
    const app = new cdk.App();
    // WHEN
    const stack = new TheLambdaCircuitBreaker.TheLambdaCircuitBreakerStack(app, 'MyTestStack');
    // THEN
    assert_1.expect(stack).to(assert_1.haveResourceLike("AWS::DynamoDB::Table", {
        "KeySchema": [
            {
                "AttributeName": "id",
                "KeyType": "HASH"
            }
        ]
    }));
});
test('DynamoDB Read/Write IAM Policy Created', () => {
    const app = new cdk.App();
    // WHEN
    const stack = new TheLambdaCircuitBreaker.TheLambdaCircuitBreakerStack(app, 'MyTestStack');
    // THEN
    assert_1.expect(stack).to(assert_1.haveResourceLike("AWS::IAM::Policy", {
        "PolicyDocument": {
            "Statement": [
                {
                    "Action": [
                        "dynamodb:BatchGetItem",
                        "dynamodb:GetRecords",
                        "dynamodb:GetShardIterator",
                        "dynamodb:Query",
                        "dynamodb:GetItem",
                        "dynamodb:Scan",
                        "dynamodb:BatchWriteItem",
                        "dynamodb:PutItem",
                        "dynamodb:UpdateItem",
                        "dynamodb:DeleteItem"
                    ],
                    "Effect": "Allow"
                }
            ]
        }
    }));
});
test('DynamoDB Lambda Created', () => {
    const app = new cdk.App();
    // WHEN
    const stack = new TheLambdaCircuitBreaker.TheLambdaCircuitBreakerStack(app, 'MyTestStack');
    // THEN
    assert_1.expect(stack).to(assert_1.haveResourceLike("AWS::Lambda::Function", {
        "Handler": "index.handler",
        "Runtime": "nodejs12.x"
    }));
});
test('API Gateway Http API Created', () => {
    const app = new cdk.App();
    // WHEN
    const stack = new TheLambdaCircuitBreaker.TheLambdaCircuitBreakerStack(app, 'MyTestStack');
    // THEN
    assert_1.expect(stack).to(assert_1.haveResourceLike("AWS::ApiGatewayV2::Api", {
        "ProtocolType": "HTTP"
    }));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhlLWxhbWJkYS1jaXJjdWl0LWJyZWFrZXIudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInRoZS1sYW1iZGEtY2lyY3VpdC1icmVha2VyLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw0Q0FBa0c7QUFDbEcscUNBQXFDO0FBQ3JDLG1GQUFtRjtBQUVuRixJQUFJLENBQUMsYUFBYSxFQUFFLEdBQUcsRUFBRTtJQUNyQixNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUMxQixPQUFPO0lBQ1AsTUFBTSxLQUFLLEdBQUcsSUFBSSx1QkFBdUIsQ0FBQyw0QkFBNEIsQ0FBQyxHQUFHLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDM0YsT0FBTztJQUNQLGVBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsc0JBQWEsQ0FBQztRQUNoQyxXQUFXLEVBQUUsRUFBRTtLQUNoQixFQUFFLG1CQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtBQUN6QixDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxrQkFBa0IsRUFBRSxHQUFHLEVBQUU7SUFDNUIsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDMUIsT0FBTztJQUNQLE1BQU0sS0FBSyxHQUFHLElBQUksdUJBQXVCLENBQUMsNEJBQTRCLENBQUMsR0FBRyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQzNGLE9BQU87SUFDVCxlQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLHlCQUFnQixDQUFDLHNCQUFzQixFQUFFO1FBQzNELFdBQVcsRUFBRTtZQUNYO2dCQUNFLGVBQWUsRUFBRSxJQUFJO2dCQUNyQixTQUFTLEVBQUUsTUFBTTthQUNsQjtTQUNGO0tBQUMsQ0FDSCxDQUFDLENBQUM7QUFDSCxDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyx3Q0FBd0MsRUFBRSxHQUFHLEVBQUU7SUFDcEQsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDMUIsT0FBTztJQUNQLE1BQU0sS0FBSyxHQUFHLElBQUksdUJBQXVCLENBQUMsNEJBQTRCLENBQUMsR0FBRyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQzNGLE9BQU87SUFDUCxlQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLHlCQUFnQixDQUFDLGtCQUFrQixFQUFFO1FBQ3ZELGdCQUFnQixFQUFFO1lBQ2hCLFdBQVcsRUFBRTtnQkFDWDtvQkFDQSxRQUFRLEVBQUU7d0JBQ1IsdUJBQXVCO3dCQUN2QixxQkFBcUI7d0JBQ3JCLDJCQUEyQjt3QkFDM0IsZ0JBQWdCO3dCQUNoQixrQkFBa0I7d0JBQ2xCLGVBQWU7d0JBQ2YseUJBQXlCO3dCQUN6QixrQkFBa0I7d0JBQ2xCLHFCQUFxQjt3QkFDckIscUJBQXFCO3FCQUN0QjtvQkFDRCxRQUFRLEVBQUUsT0FBTztpQkFDbEI7YUFBQztTQUNIO0tBQ0YsQ0FDQSxDQUFDLENBQUM7QUFDSCxDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyx5QkFBeUIsRUFBRSxHQUFHLEVBQUU7SUFDckMsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDMUIsT0FBTztJQUNQLE1BQU0sS0FBSyxHQUFHLElBQUksdUJBQXVCLENBQUMsNEJBQTRCLENBQUMsR0FBRyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQzNGLE9BQU87SUFDUCxlQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLHlCQUFnQixDQUFDLHVCQUF1QixFQUFFO1FBQzVELFNBQVMsRUFBRSxlQUFlO1FBQzFCLFNBQVMsRUFBRSxZQUFZO0tBQ3hCLENBQ0EsQ0FBQyxDQUFDO0FBQ0gsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsOEJBQThCLEVBQUUsR0FBRyxFQUFFO0lBQzFDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQzFCLE9BQU87SUFDUCxNQUFNLEtBQUssR0FBRyxJQUFJLHVCQUF1QixDQUFDLDRCQUE0QixDQUFDLEdBQUcsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUMzRixPQUFPO0lBQ1AsZUFBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyx5QkFBZ0IsQ0FBQyx3QkFBd0IsRUFBRTtRQUM3RCxjQUFjLEVBQUUsTUFBTTtLQUN2QixDQUNBLENBQUMsQ0FBQztBQUNILENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXhwZWN0IGFzIGV4cGVjdENESywgbWF0Y2hUZW1wbGF0ZSwgaGF2ZVJlc291cmNlTGlrZSxNYXRjaFN0eWxlIH0gZnJvbSAnQGF3cy1jZGsvYXNzZXJ0JztcbmltcG9ydCAqIGFzIGNkayBmcm9tICdAYXdzLWNkay9jb3JlJztcbmltcG9ydCAqIGFzIFRoZUxhbWJkYUNpcmN1aXRCcmVha2VyIGZyb20gJy4uL2xpYi90aGUtbGFtYmRhLWNpcmN1aXQtYnJlYWtlci1zdGFjayc7XG5cbnRlc3QoJ0VtcHR5IFN0YWNrJywgKCkgPT4ge1xuICAgIGNvbnN0IGFwcCA9IG5ldyBjZGsuQXBwKCk7XG4gICAgLy8gV0hFTlxuICAgIGNvbnN0IHN0YWNrID0gbmV3IFRoZUxhbWJkYUNpcmN1aXRCcmVha2VyLlRoZUxhbWJkYUNpcmN1aXRCcmVha2VyU3RhY2soYXBwLCAnTXlUZXN0U3RhY2snKTtcbiAgICAvLyBUSEVOXG4gICAgZXhwZWN0Q0RLKHN0YWNrKS50byhtYXRjaFRlbXBsYXRlKHtcbiAgICAgIFwiUmVzb3VyY2VzXCI6IHt9XG4gICAgfSwgTWF0Y2hTdHlsZS5FWEFDVCkpXG59KTtcblxudGVzdCgnRHluYW1vREIgQ3JlYXRlZCcsICgpID0+IHtcbiAgY29uc3QgYXBwID0gbmV3IGNkay5BcHAoKTtcbiAgLy8gV0hFTlxuICBjb25zdCBzdGFjayA9IG5ldyBUaGVMYW1iZGFDaXJjdWl0QnJlYWtlci5UaGVMYW1iZGFDaXJjdWl0QnJlYWtlclN0YWNrKGFwcCwgJ015VGVzdFN0YWNrJyk7XG4gIC8vIFRIRU5cbmV4cGVjdENESyhzdGFjaykudG8oaGF2ZVJlc291cmNlTGlrZShcIkFXUzo6RHluYW1vREI6OlRhYmxlXCIsIHtcbiAgXCJLZXlTY2hlbWFcIjogW1xuICAgIHtcbiAgICAgIFwiQXR0cmlidXRlTmFtZVwiOiBcImlkXCIsXG4gICAgICBcIktleVR5cGVcIjogXCJIQVNIXCJcbiAgICB9XG4gIF19XG4pKTtcbn0pO1xuXG50ZXN0KCdEeW5hbW9EQiBSZWFkL1dyaXRlIElBTSBQb2xpY3kgQ3JlYXRlZCcsICgpID0+IHtcbmNvbnN0IGFwcCA9IG5ldyBjZGsuQXBwKCk7XG4vLyBXSEVOXG5jb25zdCBzdGFjayA9IG5ldyBUaGVMYW1iZGFDaXJjdWl0QnJlYWtlci5UaGVMYW1iZGFDaXJjdWl0QnJlYWtlclN0YWNrKGFwcCwgJ015VGVzdFN0YWNrJyk7XG4vLyBUSEVOXG5leHBlY3RDREsoc3RhY2spLnRvKGhhdmVSZXNvdXJjZUxpa2UoXCJBV1M6OklBTTo6UG9saWN5XCIsIHtcbiAgXCJQb2xpY3lEb2N1bWVudFwiOiB7XG4gICAgXCJTdGF0ZW1lbnRcIjogW1xuICAgICAge1xuICAgICAgXCJBY3Rpb25cIjogW1xuICAgICAgICBcImR5bmFtb2RiOkJhdGNoR2V0SXRlbVwiLFxuICAgICAgICBcImR5bmFtb2RiOkdldFJlY29yZHNcIixcbiAgICAgICAgXCJkeW5hbW9kYjpHZXRTaGFyZEl0ZXJhdG9yXCIsXG4gICAgICAgIFwiZHluYW1vZGI6UXVlcnlcIixcbiAgICAgICAgXCJkeW5hbW9kYjpHZXRJdGVtXCIsXG4gICAgICAgIFwiZHluYW1vZGI6U2NhblwiLFxuICAgICAgICBcImR5bmFtb2RiOkJhdGNoV3JpdGVJdGVtXCIsXG4gICAgICAgIFwiZHluYW1vZGI6UHV0SXRlbVwiLFxuICAgICAgICBcImR5bmFtb2RiOlVwZGF0ZUl0ZW1cIixcbiAgICAgICAgXCJkeW5hbW9kYjpEZWxldGVJdGVtXCJcbiAgICAgIF0sXG4gICAgICBcIkVmZmVjdFwiOiBcIkFsbG93XCIgIFxuICAgIH1dXG4gIH1cbn1cbikpO1xufSk7XG5cbnRlc3QoJ0R5bmFtb0RCIExhbWJkYSBDcmVhdGVkJywgKCkgPT4ge1xuY29uc3QgYXBwID0gbmV3IGNkay5BcHAoKTtcbi8vIFdIRU5cbmNvbnN0IHN0YWNrID0gbmV3IFRoZUxhbWJkYUNpcmN1aXRCcmVha2VyLlRoZUxhbWJkYUNpcmN1aXRCcmVha2VyU3RhY2soYXBwLCAnTXlUZXN0U3RhY2snKTtcbi8vIFRIRU5cbmV4cGVjdENESyhzdGFjaykudG8oaGF2ZVJlc291cmNlTGlrZShcIkFXUzo6TGFtYmRhOjpGdW5jdGlvblwiLCB7XG4gIFwiSGFuZGxlclwiOiBcImluZGV4LmhhbmRsZXJcIixcbiAgXCJSdW50aW1lXCI6IFwibm9kZWpzMTIueFwiXG59XG4pKTtcbn0pO1xuXG50ZXN0KCdBUEkgR2F0ZXdheSBIdHRwIEFQSSBDcmVhdGVkJywgKCkgPT4ge1xuY29uc3QgYXBwID0gbmV3IGNkay5BcHAoKTtcbi8vIFdIRU5cbmNvbnN0IHN0YWNrID0gbmV3IFRoZUxhbWJkYUNpcmN1aXRCcmVha2VyLlRoZUxhbWJkYUNpcmN1aXRCcmVha2VyU3RhY2soYXBwLCAnTXlUZXN0U3RhY2snKTtcbi8vIFRIRU5cbmV4cGVjdENESyhzdGFjaykudG8oaGF2ZVJlc291cmNlTGlrZShcIkFXUzo6QXBpR2F0ZXdheVYyOjpBcGlcIiwge1xuICBcIlByb3RvY29sVHlwZVwiOiBcIkhUVFBcIlxufVxuKSk7XG59KTtcbiJdfQ==